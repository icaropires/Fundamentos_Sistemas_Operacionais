#include "semaphore.h"
#include "message.h"
#include "kid.h"

#include <signal.h>
#include <sys/wait.h>

int STOP_REQUEST;

void handle_sigint(int signal){
	STOP_REQUEST = 1;
}

int main(int argc, char** argv) {
	generate_arb_file();
	int semid = get_ready_semaphores(10);

    pid_t pid = fork();

	if(pid){
		int count = 0;

		if(signal(SIGINT, handle_sigint) == SIG_ERR){
			perror("Problem at interruptiong process");
		}

		while(!STOP_REQUEST){
			fprintf(stderr, "parent\n");
			sleep(1);

			if(count == 2){
				fprintf(stderr, "parent: %d\n", count);
				down(semid, 0);
			}
			count++;
		}
		wait(0);

		remove_semaphores(semid);
		fprintf(stderr, "Ending parent\n");
	} else{
		int count = 0;

		while(!STOP_REQUEST){
			fprintf(stderr, "kid\n");
			sleep(1);

			if(count == 5){
				fprintf(stderr, "kid: %d\n", count);
				up(semid, 0);
			}

			count++;
		}
	}
	return 0;
    // thinking_kid(pid);
    // waiting_kid(pid);
    // acrossing_kid(pid);
	
}
